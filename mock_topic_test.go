// Code generated by mockery v1.0.0. DO NOT EDIT.

package warta

import mock "github.com/stretchr/testify/mock"
import sync "sync"

// mockTopic is an autogenerated mock type for the topic type
type mockTopic struct {
	mock.Mock
}

// addListener provides a mock function with given fields: val
func (_m *mockTopic) addListener(val interface{}) (listener, error) {
	ret := _m.Called(val)

	var r0 listener
	if rf, ok := ret.Get(0).(func(interface{}) listener); ok {
		r0 = rf(val)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listener)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(val)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getListeners provides a mock function with given fields:
func (_m *mockTopic) getListeners() map[string]listener {
	ret := _m.Called()

	var r0 map[string]listener
	if rf, ok := ret.Get(0).(func() map[string]listener); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]listener)
		}
	}

	return r0
}

// getMutex provides a mock function with given fields:
func (_m *mockTopic) getMutex() *sync.Mutex {
	ret := _m.Called()

	var r0 *sync.Mutex
	if rf, ok := ret.Get(0).(func() *sync.Mutex); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sync.Mutex)
		}
	}

	return r0
}

// setListeners provides a mock function with given fields: listeners
func (_m *mockTopic) setListeners(listeners map[string]listener) {
	_m.Called(listeners)
}
