// Code generated by mockery v1.0.0. DO NOT EDIT.

package warta

import mock "github.com/stretchr/testify/mock"

// MockWarta is an autogenerated mock type for the Warta type
type MockWarta struct {
	mock.Mock
}

// Broadcast provides a mock function with given fields: topic, args
func (_m *MockWarta) Broadcast(topic TopicName, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, topic)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(TopicName, ...interface{}) error); ok {
		r0 = rf(topic, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BroadcastClose provides a mock function with given fields: topic, args
func (_m *MockWarta) BroadcastClose(topic TopicName, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, topic)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(TopicName, ...interface{}) error); ok {
		r0 = rf(topic, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BroadcastCreate provides a mock function with given fields: topic, args
func (_m *MockWarta) BroadcastCreate(topic TopicName, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, topic)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(TopicName, ...interface{}) error); ok {
		r0 = rf(topic, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseTopic provides a mock function with given fields: name
func (_m *MockWarta) CloseTopic(name TopicName) {
	_m.Called(name)
}

// CreateTopic provides a mock function with given fields: name
func (_m *MockWarta) CreateTopic(name TopicName) (topic, error) {
	ret := _m.Called(name)

	var r0 topic
	if rf, ok := ret.Get(0).(func(TopicName) topic); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(TopicName) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Listen provides a mock function with given fields: topic, callback
func (_m *MockWarta) Listen(topic TopicName, callback interface{}) (listener, error) {
	ret := _m.Called(topic, callback)

	var r0 listener
	if rf, ok := ret.Get(0).(func(TopicName, interface{}) listener); ok {
		r0 = rf(topic, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listener)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(TopicName, interface{}) error); ok {
		r1 = rf(topic, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListenCreate provides a mock function with given fields: topic, callback
func (_m *MockWarta) ListenCreate(topic TopicName, callback interface{}) (listener, error) {
	ret := _m.Called(topic, callback)

	var r0 listener
	if rf, ok := ret.Get(0).(func(TopicName, interface{}) listener); ok {
		r0 = rf(topic, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listener)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(TopicName, interface{}) error); ok {
		r1 = rf(topic, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
